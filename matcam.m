function varargout = matcam(varargin)
% Last Modified by Kevin Tanghe, KU Leuven 22-Mar-2017

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @matcam_OpeningFcn, ...
                   'gui_OutputFcn',  @matcam_OutputFcn, ...
                   'gui_LayoutFcn',  @matcam_LayoutFcn, ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before matcam is made visible.
function matcam_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to matcam (see VARARGIN)

handles.output = hObject;

% Update handles structure
guidata(hObject, handles);
initialize_gui(hObject, handles, false);

% UIWAIT makes matcam wait for user response (see UIRESUME)
% uiwait(handles.Matcam);

%% helper functions
function [theta, S, V, A, start_index, end_index] = calcMotionSegment(handles)

if handles.temp.startangle < handles.temp.endangle
L0 = handles.temp.startlift;
L1 = handles.temp.endlift;

[~, start_index] = min(abs(handles.out.thetadegree - handles.temp.startangle));
[~, end_index] = min(abs(handles.out.thetadegree - handles.temp.endangle));

theta=handles.out.thetadegree(start_index:end_index);
beta = theta(end)-theta(1);
x=(theta-theta(1))/beta;

if handles.temp.cycloidtype==1
		L=L1-L0;
		S=L*(x-sin(pi*x)/pi)+L0;
		V=L/beta*(1-cos(pi*x));
		A=pi*L/beta^2*(sin(pi*x));
	
elseif handles.temp.cycloidtype==2
		L=L1-L0;
		S=L*(x+sin(pi*x)/pi)+L0;
		V=L/beta*(1+cos(pi*x));
		A=-pi*L/beta^2*(sin(pi*x));

elseif handles.temp.cycloidtype==3
		L=-(L1-L0);
		S=L*(1-x+sin(pi*x)/pi)+L0-L;
		V=-L/beta*(1-cos(pi*x));
		A=-pi*L/beta^2*(sin(pi*x));

elseif handles.temp.cycloidtype==4
		L=-(L1-L0);
		S=L*(1-x-sin(pi*x)/pi)+L0-L;
		V=-L/beta*(1+cos(pi*x));
		A=pi*L/beta^2*(sin(pi*x));

elseif handles.temp.cycloidtype==5
		L=L1-L0;
		S=L*(x-sin(2*pi*x)/2/pi)+L0;
		V=L/beta*(1-cos(2*pi*x));
		A=2*pi*L/beta^2*(sin(2*pi*x));

elseif handles.temp.cycloidtype==6
		L=-(L1-L0);
		S=L*(1-x+sin(2*pi*x)/2/pi)+L0-L;
		V=-L/beta*(1-cos(2*pi*x));
		A=-2*pi*L/beta^2*(sin(2*pi*x));

end
else
  errordlg('End angle should be bigger than start angle.', 'Error')
  theta = handles.out.thetadegree;
  S = handles.out.S;
  V = handles.out.Vdegree;
  A = handles.out.Adegree;
  start_index = 1;
  end_index = length(theta);
end

function [theta, extload, start_index, end_index] = calcExtLoadSegment(handles)

if handles.temp.startangleload < handles.temp.endangleload
  [~, start_index] = min(abs(handles.out.thetadegree - handles.temp.startangleload));
  [~, end_index] = min(abs(handles.out.thetadegree - handles.temp.endangleload));

  theta=handles.out.thetadegree(start_index:end_index);
  extload = (handles.temp.endload - handles.temp.startload)/(theta(end)-theta(1))*(theta - theta(1)) + handles.temp.startload;
else
  errordlg('End angle should be bigger than start angle.', 'Error')
  theta = handles.out.thetadegree;
  extload = handles.out.extload;
  start_index = 1;
  end_index = length(theta);
end

function pressure_angle = calcPressureAngle(handles)
pressure_angle = NaN * handles.out.theta;
if abs(handles.out.exc) > handles.out.bcr + handles.out.rof
  errordlg('|excentricity| must be lower than (base circle radius + radius of follower. Cannot compute radius of curvature.', 'Error')
else
  pressure_angle = atan((handles.out.V-handles.out.exc)./(sqrt((handles.out.bcr+handles.out.rof)^2-handles.out.exc^2)+handles.out.S));
end

function [roc_pitch, roc_cam] = calcRadiusOfCurvature(handles)
roc_pitch = NaN * handles.out.theta;
roc_cam = NaN * handles.out.theta;
if abs(handles.out.exc) > handles.out.bcr + handles.out.rof
  errordlg('|excentricity| must be lower than (base circle radius + radius of follower. Cannot compute radius of curvature.', 'Error')
else
  d = sqrt((handles.out.bcr + handles.out.rof)^2 - handles.out.exc^2); %Nortron, Kinematic and dynamics of Machinery eq. 8.31c
  exc = handles.out.exc;
  s = handles.out.S;
  ds = handles.out.V;
  dds = handles.out.A;

  lambda = - handles.out.theta - atan2(handles.out.exc, d+handles.out.S) + pi/2; %Nortron, Kinematic and dynamics of Machinery eq. 8.34, adapted vor vertical follower instead of a horizontal one (--> + pi/2)
  dlambda = -1 + exc./((d+s).^2 + exc^2) .* ds; %derivative of lambda with repect to theta
  ddlambda = exc./((d+s).^2 + exc^2).*dds - 2*exc*(d+s).*ds.^2./((d+s).^2 + exc^2).^2; % 2nd derivative of lambda with repect to theta

  % Nortron, Kinematic and dynamics of Machinery eq. 8.34: 
  % x = cos(lambda) * sqrt((d+s)^2 + exc^2)
  % to calculte the derivative, split this up:
  % x = f*g with
  % f = cos(lambda) and
  % g = sqrt((d+s)^2 + exc^2)
  % idem for y
  g = sqrt((d+s).^2 + exc^2); 
  dg = ds.*(d+s)./sqrt((d+s).^2 + exc^2); %derivative of g with repect to theta
  ddg = (ds.^2  + dds.*(d + s))./sqrt((d + s).^2 + exc.^2) - (ds.^2.*(d + s).^2)./((d + s).^2 + exc.^2).^(3/2); % 2nd derivative of g with repect to theta

  h = sin(lambda);
  dh = cos(lambda).*dlambda; %derivative of h with repect to theta
  ddh = -sin(lambda).*dlambda.^2 + cos(lambda).*ddlambda; % 2nd derivative of h with repect to theta
  f = cos(lambda);
  df = -sin(lambda).*dlambda; %derivative of f with repect to theta
  ddf = -cos(lambda).*dlambda.^2 - sin(lambda).*ddlambda; % 2nd derivative of f with repect to theta

  % x = f.*g;
  % y = h.*g;

  dx = df.*g + f.*dg; %derivative of x with repect to theta
  ddx = ddf.*g + 2.*df.*dg + f.*ddg; % 2nd derivative of x with repect to theta
  dy = dh.*g + h.*dg; %derivative of y with repect to theta
  ddy = ddh.*g + 2*dh.*dg + h.*ddg; % 2nd derivative of y with repect to theta

  roc_pitch = -(dx.^2 + dy.^2).^(3/2) ./ (dx.*ddy - dy.*ddx); % general forumula for the radius of curvature
  roc_cam = roc_pitch - handles.out.rof;
end

function [normalforce_tot, normalforce_acc, normalforce_load, normalforce_spring, force_x, force_y] = calcForces(handles)
pressure_angle = calcPressureAngle(handles);
normalforce_spring = (handles.out.S*handles.out.springconstant+handles.out.springpreload)./cos(pressure_angle);
normalforce_load = handles.out.extload./cos(pressure_angle);
normalforce_acc = handles.out.mass*handles.out.A/1000*(handles.out.w^2)./cos(pressure_angle);
normalforce_tot = normalforce_spring + normalforce_load + normalforce_acc;
force_x = normalforce_tot .* sin(pressure_angle);
force_y = normalforce_tot .* cos(pressure_angle);

function [xpitch, ypitch, xcam, ycam] = calcCamContour(handles)
xpitch = NaN * handles.out.theta;
xcam = NaN * handles.out.theta;
ypitch = NaN * handles.out.theta;
ycam = NaN * handles.out.theta;
if abs(handles.out.exc) > handles.out.bcr + handles.out.rof
  errordlg('|excentricity| must be lower than (base circle radius + radius of follower. Cannot compute radius of curvature.', 'Error')
else
  d = sqrt((handles.out.bcr + handles.out.rof)^2 - handles.out.exc^2);
  lambda = - handles.out.theta - atan2(handles.out.exc, d+handles.out.S) + pi/2;
  xpitch = cos(lambda) .* sqrt( (d+handles.out.S).^2 + handles.out.exc^2 );
  ypitch = sin(lambda) .* sqrt( (d+handles.out.S).^2 + handles.out.exc^2 );

  pressure_angle = calcPressureAngle(handles);
  xcam = xpitch + handles.out.rof*cos(-handles.out.theta + pressure_angle + 3*pi/2);
  ycam = ypitch + handles.out.rof*sin(-handles.out.theta + pressure_angle + 3*pi/2);
end

function value_out = checkInputEditField(hObject, handles, min_value, max_value, string_identifier) %#ok<*INUSL>
%check if the input is of numeric input + check if it is between min_value
%and max_value
%the string_identifier is used in the error message
value_out = NaN;
value= str2double(get(hObject,'String'));
if isempty(min_value)
  min_value = -Inf;
end
if isempty(max_value)
  max_value = Inf;
end

background_color_error = [0.8500, 0.3250, 0.0980];
background_color_noerror = [1, 1, 1];

if isnan(value)
  errordlg(sprintf('Expected a numeric value for %s. Received "%s".\n', string_identifier, get(hObject,'String')), 'Error');
  set(hObject, 'BackgroundColor', background_color_error);
  set(hObject, 'String', ['(Error) ', get(hObject,'String')]);
else
  if value < min_value || value > max_value
    errordlg(sprintf('Expected value between %.0f and %.0f for %s. Received "%s". \n', min_value, max_value, string_identifier, get(hObject,'String')), 'Error');
    set(hObject, 'BackgroundColor', background_color_error);
    set(hObject, 'String', ['(Error) ', get(hObject,'String')]);
  else
    value_out = value;
    set(hObject, 'BackgroundColor', background_color_noerror);
  end
end


%% callback functions
function startangle_Callback(hObject, eventdata, handles) %#ok<*DEFNU>
handles.temp.startangle = checkInputEditField(hObject, handles, 0, 360, 'start angle');
guidata(hObject, handles);

function startlift_Callback(hObject, eventdata, handles)
handles.temp.startlift = checkInputEditField(hObject, handles, [], [], 'start lift');
guidata(hObject, handles);

function endangle_Callback(hObject, eventdata, handles)
handles.temp.endangle = checkInputEditField(hObject, handles, 0, 360, 'end angle');
guidata(hObject, handles);

function endlift_Callback(hObject, eventdata, handles)
handles.temp.endlift = checkInputEditField(hObject, handles, [], [], 'end lift');
guidata(hObject, handles);

function cycloidtype_Callback(hObject, eventdata, handles)
handles.temp.cycloidtype =  get(hObject,'Value');
guidata(hObject, handles);

function viewall_Callback(hObject, eventdata, handles)
ax1 = subplot(3,1,1, 'Parent', handles.uipanelfigure);
plot(ax1, handles.out.thetadegree, handles.out.S, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'Follower position (mm)')
xlim(ax1, [0,360])
ax2 = subplot(3,1,2, 'Parent', handles.uipanelfigure);
plot(ax2, handles.out.thetadegree, handles.out.Vdegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax2, 'Follower velocity (mm/degree)')
grid(ax2)
xlim(ax2, [0,360])
ax3 = subplot(3,1,3, 'Parent', handles.uipanelfigure);
plot(ax3, handles.out.thetadegree, handles.out.Adegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax3,'Follower acceleration (mm/degree^2)')
xlabel(ax3,'cam degrees', 'FontSize' , 16)
grid(ax3)
xlim(ax3, [0,360])
set(ax1, 'FontSize', 13);
set(ax2, 'FontSize', 13);
set(ax3, 'FontSize', 13);

function viewsegment_Callback(hObject, eventdata, handles)
[theta, S, V, A] = calcMotionSegment(handles);
ax1 = subplot(3,1,1, 'Parent', handles.uipanelfigure);
plot(ax1, theta, S, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'Follower position (mm)')
ax2 = subplot(3,1,2, 'Parent', handles.uipanelfigure);
plot(ax2, theta, V, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax2, 'Follower velocity (mm/degree)')
grid(ax2)
ax3 = subplot(3,1,3, 'Parent', handles.uipanelfigure);
plot(ax3, theta, A, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax3,'Follower acceleration (mm/degree^2)')
xlabel(ax3,'cam degrees', 'FontSize' , 16)
grid(ax3)
set(ax1, 'FontSize', 13);
set(ax2, 'FontSize', 13);
set(ax3, 'FontSize', 13);

function addsegment_Callback(hObject, eventdata, handles)
[~, S, V, A, start_index, end_index] = calcMotionSegment(handles);
handles.out.S(start_index:end_index) = S;
handles.out.V(start_index:end_index) = V*180/pi;
handles.out.A(start_index:end_index) = A*(180/pi)^2;
handles.out.Vdegree(start_index:end_index) = V;
handles.out.Adegree(start_index:end_index) = A;
guidata(hObject, handles);

ax1 = subplot(3,1,1, 'Parent', handles.uipanelfigure);
plot(ax1, handles.out.thetadegree, handles.out.S, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'Follower position (mm)')
xlim(ax1, [0,360])
ax2 = subplot(3,1,2, 'Parent', handles.uipanelfigure);
plot(ax2, handles.out.thetadegree, handles.out.Vdegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax2, 'Follower velocity (mm/degree)')
grid(ax2)
xlim(ax2, [0,360])
ax3 = subplot(3,1,3, 'Parent', handles.uipanelfigure);
plot(ax3, handles.out.thetadegree, handles.out.Adegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax3,'Follower acceleration (mm/degree^2)')
xlabel(ax3,'cam degrees', 'FontSize' , 16)
grid(ax3)
xlim(ax3, [0,360])
set(ax1, 'FontSize' , 13);
set(ax2, 'FontSize' , 13);
set(ax3, 'FontSize' , 13);

function clearmotion_Callback(hObject, eventdata, handles)
handles.out.S = zeros(1, length(handles.out.thetadegree));
handles.out.V = zeros(1, length(handles.out.thetadegree));
handles.out.A = zeros(1, length(handles.out.thetadegree));
handles.out.Vdegree = zeros(1, length(handles.out.thetadegree));
handles.out.Adegree = zeros(1, length(handles.out.thetadegree));
guidata(hObject, handles);
ax1 = subplot(3,1,1, 'Parent', handles.uipanelfigure);
plot(ax1, handles.out.thetadegree, handles.out.S, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'Follower position (mm)')
xlim(ax1, [0,360])
ax2 = subplot(3,1,2, 'Parent', handles.uipanelfigure);
plot(ax2, handles.out.thetadegree, handles.out.Vdegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax2, 'Follower velocity (mm/degree)')
grid(ax2)
xlim(ax2, [0,360])
ax3 = subplot(3,1,3, 'Parent', handles.uipanelfigure);
plot(ax3, handles.out.thetadegree, handles.out.Adegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
title(ax3,'Follower acceleration (mm/degree^2)')
xlabel(ax3,'cam degrees', 'FontSize' , 16)
grid(ax3)
xlim(ax3, [0,360])
set(ax1, 'FontSize', 13);
set(ax2, 'FontSize', 13);
set(ax3, 'FontSize', 13);

function startangleload_Callback(hObject, eventdata, handles)
handles.temp.startangleload = checkInputEditField(hObject, handles, 0, 360, 'start angle');
guidata(hObject, handles);

function startload_Callback(hObject, eventdata, handles)
handles.temp.startload = checkInputEditField(hObject, handles, [], [], 'start load');
guidata(hObject, handles);

function endangleload_Callback(hObject, eventdata, handles)
handles.temp.endangleload = checkInputEditField(hObject, handles, 0, 360, 'end angle');
guidata(hObject, handles);

function endload_Callback(hObject, eventdata, handles)
handles.temp.endload = checkInputEditField(hObject, handles, [], [], 'end load');
guidata(hObject, handles);

function viewallload_Callback(hObject, eventdata, handles)
ax1 = subplot(1,1,1, 'Parent', handles.uipanelfigure);
cla(ax1, 'reset');
plot(ax1, handles.out.thetadegree, handles.out.extload, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'External load (N)')
xlabel(ax1,'cam degrees', 'FontSize' , 16)
xlim(ax1, [0,360])
set(ax1, 'FontSize' , 13);

function viewsegementload_Callback(hObject, eventdata, handles)
[theta, extload] = calcExtLoadSegment(handles);
ax1 = subplot(1,1,1, 'Parent', handles.uipanelfigure);
cla(ax1, 'reset');
plot(ax1, theta, extload, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'External load (N)')
xlabel(ax1,'cam degrees', 'FontSize' , 16)
set(ax1, 'FontSize' , 13);

function addsegmentload_Callback(hObject, eventdata, handles)
[~, extload, start_index, end_index] = calcExtLoadSegment(handles);
handles.out.extload(start_index:end_index) = extload;
guidata(hObject, handles);

ax1 = subplot(1,1,1, 'Parent', handles.uipanelfigure);
plot(ax1, handles.out.thetadegree, handles.out.extload, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'External load (N)')
xlabel(ax1,'cam degrees', 'FontSize' , 16)
xlim(ax1, [0,360])
set(ax1, 'FontSize' , 13);

function clearload_Callback(hObject, eventdata, handles)
handles.out.extload = zeros(1, length(handles.out.theta));
guidata(hObject, handles);

ax1 = subplot(1,1,1, 'Parent', handles.uipanelfigure);
cla(ax1, 'reset');

plot(ax1, handles.out.thetadegree, handles.out.extload, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
grid(ax1)
title(ax1, 'External load (N)')
xlabel(ax1,'cam degrees', 'FontSize' , 16)
xlim(ax1, [0,360])
set(ax1, 'FontSize' , 13);

function bcr_Callback(hObject, eventdata, handles)
handles.out.bcr = checkInputEditField(hObject, handles, 0, [], 'base circle radius');

%check if the new bcr is compatible with the given excentricity
background_color_error = [0.8500, 0.3250, 0.0980];
background_color_noerror = [1, 1, 1];
if ~isnan(handles.out.bcr) && ~isnan(handles.out.rof) && ~isnan(handles.temp.exc)
  if abs(handles.temp.exc) > (handles.out.bcr + handles.out.rof)
    errordlg('|excentricity| must be lower than (base circle radius + radius of follower). Excentricity not set.', 'Error' )
    set(handles.exc, 'BackgroundColor' , background_color_error);
    if isempty(strfind(get(handles.exc, 'String'), 'Error'))
      set(handles.exc, 'String' , ['(Error) ', get(handles.exc,'String')]);
    end
  else
    set(handles.exc, 'BackgroundColor' , background_color_noerror);
    set(handles.exc, 'String' , num2str(handles.temp.exc));
    handles.out.exc = handles.temp.exc;
  end
end
guidata(hObject, handles);

function rof_Callback(hObject, eventdata, handles)
handles.out.rof = checkInputEditField(hObject, handles, 0, [], 'radius of follower');

%check if the new rof is compatible with the given excentricity
background_color_error = [0.8500, 0.3250, 0.0980];
background_color_noerror = [1, 1, 1];
if ~isnan(handles.out.bcr) && ~isnan(handles.out.rof) && ~isnan(handles.temp.exc)
  if abs(handles.temp.exc) > (handles.out.bcr + handles.out.rof)
    errordlg('|excentricity| must be lower than (base circle radius + radius of follower). Excentricity not set.', 'Error' )
    set(handles.exc, 'BackgroundColor' , background_color_error);
    if isempty(strfind(get(handles.exc, 'String'), 'Error'))
      set(handles.exc, 'String' , ['(Error) ', get(handles.exc,'String')]);
    end
  else
    set(handles.exc, 'BackgroundColor' , background_color_noerror);
    set(handles.exc, 'String' , num2str(handles.temp.exc));
    handles.out.exc = handles.temp.exc;
  end
end
guidata(hObject, handles);

function exc_Callback(hObject, eventdata, handles)
handles.temp.exc = checkInputEditField(hObject, handles, [], [], 'excentricity');

%check if the exc is possible
background_color_error = [0.8500, 0.3250, 0.0980];
background_color_noerror = [1, 1, 1];
if ~isnan(handles.temp.exc)
  if abs(handles.temp.exc) > (handles.out.bcr + handles.out.rof)
    errordlg('|excentricity| must be lower than (base circle radius + radius of follower). Excentricity not set.', 'Error');
    set(hObject, 'BackgroundColor' , background_color_error);
    set(hObject, 'String' , ['(Error) ', get(hObject,'String')]);
  else
    handles.out.exc = handles.temp.exc;
    set(hObject, 'BackgroundColor' , background_color_noerror);
  end
end
guidata(hObject, handles);

function campos_Callback(hObject, eventdata, handles)
handles.temp.campos = checkInputEditField(hObject, handles, [], [], 'cam position');
while handles.temp.campos < 0
  handles.temp.campos = handles.temp.campos + 360;
end
guidata(hObject, handles);

function mass_Callback(hObject, eventdata, handles)
handles.out.mass = checkInputEditField(hObject, handles, 0, [], 'mass');
guidata(hObject, handles);

function springconstant_Callback(hObject, eventdata, handles)
handles.out.springconstant = checkInputEditField(hObject, handles, 0, [], 'spring constant');
guidata(hObject, handles);

function springpreload_Callback(hObject, eventdata, handles)
handles.out.springpreload = checkInputEditField(hObject, handles, 0, [], 'spring preload');
guidata(hObject, handles);

function rpm_Callback(hObject, eventdata, handles)
handles.out.rpm = checkInputEditField(hObject, handles, 0, [], 'rpm');
handles.out.w = handles.out.rpm * 2*pi/60;
guidata(hObject, handles);


function pushbuttonplotanalysis_Callback(hObject, eventdata, handles)
ax1 = subplot(1,1,1, 'Parent', handles.uipanelfigure);
cla(ax1, 'reset');

if get(handles.radiobuttonlift, 'Value') == 1
  plot(ax1, handles.out.thetadegree, handles.out.S, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
  title(ax1, 'Follower position (mm)')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttonvelocity, 'Value') == 1
  plot(ax1, handles.out.thetadegree, handles.out.Vdegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
  title(ax1, 'Follower velocity (mm/degree)')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttonacceleration, 'Value') == 1
  plot(ax1, handles.out.thetadegree, handles.out.Adegree, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
  title(ax1, 'Follower acceleration (mm/degree^2)')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttonpressureangle, 'Value') ==1
  pressure_angle = calcPressureAngle(handles);
  plot(ax1, handles.out.thetadegree, pressure_angle*180/pi, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]);
  title(ax1, 'Pressure angle (deg)')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttonroc, 'Value') == 1
  [roc_pitch, roc_cam] = calcRadiusOfCurvature(handles);
  dtheta = handles.out.theta(2) - handles.out.theta(1);
  inds = find(abs(diff(roc_pitch)/dtheta)<1e4);
  maxi = max(10, max(roc_pitch(inds+1)));
  mini = min(-10, min(roc_pitch(inds+1)));
  plot(ax1, handles.out.thetadegree, roc_pitch, 'LineWidth', 1.5, 'Color', [0,0.4470,0.7410]) 
  hold(ax1, 'on')
  plot(ax1, handles.out.thetadegree, roc_cam, 'LineWidth', 1.5, 'Color', [0.8500,0.3250,0.0980]);
  ylim(ax1, [mini, maxi])
  legend(ax1, 'pitch', 'cam')
  title(ax1, 'Radius of curvature (mm)')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttoncamcontour, 'Value') == 1
  [xpitch, ypitch, xcam, ycam] = calcCamContour(handles);
  %Rotate the coordinates following the requested cam position
  angle = handles.temp.campos*pi/180;
  R = [cos(angle), -sin(angle);
       sin(angle), cos(angle)];
  pitch_curve = R * [xpitch; ypitch];
  cam_curve = R* [xcam; ycam];
  
  exc = handles.out.exc;
  rof = handles.out.rof;
  bcr = handles.out.bcr;
  
  [~, ind_theta] = min(abs(handles.out.theta - angle));
  
  d = sqrt((handles.out.bcr + handles.out.rof)^2 - handles.out.exc^2);
  x_rolfol_center=exc; % x coordinate of the center of the roller of the follower
  y_rolfol_center=d +handles.out.S(ind_theta); %y coordinate of the center of the roller of the follower
  x_rolfol = rof*cos(handles.out.theta) + x_rolfol_center; %x coordinate of the contour of the roller
  y_rolfol = rof*sin(handles.out.theta) + y_rolfol_center; %y coordinate of the contour of the roller
  
  min_distance_center_roller_to_bore = 2*rof;
  height_bore = rof;
  
  width_block_on_follower = bcr/2;
  height_block_on_follower = bcr/2;
  
  x_boreleft=[exc-5; exc-1; exc-1; exc-5];
  x_boreright=[exc+5; exc+1; exc+1; exc+5];
  y_bore = [repmat(d+max(handles.out.S) + min_distance_center_roller_to_bore, 2, 1); repmat(d+max(handles.out.S) + min_distance_center_roller_to_bore+height_bore, 2, 1)];
  length_follower = y_bore(end) - ypitch(1) - rof + 0.2;
   
  x_follower = [x_rolfol_center; x_rolfol_center];
  y_follower = [y_rolfol_center + rof; y_rolfol_center + rof + length_follower];
  
  x_block_on_follower = [-width_block_on_follower; width_block_on_follower; width_block_on_follower; -width_block_on_follower] + x_follower(1);
  y_block_on_follower = [0; 0; height_block_on_follower; height_block_on_follower] + y_follower(2);
  
  ref_line = R* [0 , 0;
                 0,  bcr]; %line, indicating the reference (= cam position = 0 degrees)
  
  pressure_angle = calcPressureAngle(handles);
  x_pressangle=[x_rolfol_center + rof*sin(pressure_angle(ind_theta)), x_rolfol_center - rof*sin(pressure_angle(ind_theta))];
  y_pressangle=[y_rolfol_center - rof*cos(pressure_angle(ind_theta)), y_rolfol_center + rof*cos(pressure_angle(ind_theta))];
  
  dtheta = handles.out.thetadegree(2)-handles.out.thetadegree(1);
  v = version;
  ind = strfind(v, 'R20');
  year = str2double(v(ind+1:ind+4));
  if year < 2016
    fill(cam_curve(1,1/dtheta:end), cam_curve(2,1/dtheta:end), 'b', 'Parent', ax1);
  else
    fill(ax1, cam_curve(1,1:1/dtheta:end), cam_curve(2,1:1/dtheta:end), 'b');
  end
  hold(ax1, 'on');
  if year < 2016
    fill(x_rolfol(1/dtheta:end), y_rolfol(1/dtheta:end), 'g', 'Parent', ax1);
  else
    fill(ax1, x_rolfol(1:1/dtheta:end), y_rolfol(1:1/dtheta:end), 'g');
  end
  plot(ax1, pitch_curve(1,1:1/dtheta:end), pitch_curve(2,1:1/dtheta:end), '--r');
  plot(ax1, 0, 0,'r+')
  plot(ax1, x_pressangle,y_pressangle,'r--')
  plot(ax1, ref_line(1,:),ref_line(2,:),'r--')
  plot(ax1, x_boreleft,y_bore,'r')
  plot(ax1, x_boreright,y_bore,'r')
  plot(ax1, x_follower, y_follower, 'r')
  if year < 2016
    fill(x_block_on_follower, y_block_on_follower, 'g', 'Parent', ax1)
  else
    fill(ax1, x_block_on_follower, y_block_on_follower, 'g')  
  end
  
  xlimits = [min(pitch_curve(1,:)), max(pitch_curve(1,:))];
  ylimits = [min(pitch_curve(2,:)), d + max(handles.out.S) + rof + length_follower + height_block_on_follower];
  
  xlim(ax1, xlimits*1.2);
  ylim(ax1, ylimits*1.05);
  set(ax1, 'DataAspectRatio', [1,1,1])
  grid(ax1)
  title(ax1, 'Cam contour (mm)')
elseif get(handles.radiobuttonnormalforce, 'Value') ==1 
  [normalforce_tot, normalforce_acc, normalforce_load, normalforce_spring] = calcForces(handles);
  plot(ax1, handles.out.thetadegree, normalforce_tot, 'Color', [0, 0.4470, 0.7410], 'LineWidth', 1.5);
  hold(ax1, 'on');
  plot(ax1, handles.out.thetadegree, normalforce_acc, '--', 'Color', [0.8500, 0.3250, 0.0980], 'LineWidth', 1.5);
  plot(ax1, handles.out.thetadegree, normalforce_load, ':', 'Color', [0, 170/255, 14/255], 'LineWidth', 2);
  plot(ax1, handles.out.thetadegree, normalforce_spring, '-.', 'Color', [0.4940, 0.1840 , 0.5560], 'LineWidth', 1.5);
  title(ax1, 'Normal Force (N)')
  legend(ax1, 'total', 'acc', 'extload', 'spring')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
elseif get(handles.radiobuttonxyforce, 'Value') == 1
  [~, ~, ~, ~, force_x, force_y] = calcForces(handles);
  plot(ax1, handles.out.thetadegree, force_x,  handles.out.thetadegree, force_y, 'LineWidth', 1.5)
  
  title(ax1, 'Force (N)')
  legend(ax1, 'x-component', 'y-component')
  
  grid(ax1)
  xlabel(ax1, 'Cam angle (degree)', 'FontSize' , 16)
  xlim(ax1, [0, 360]);
end
set(ax1, 'FontSize' , 13);


function pushbuttonsave_Callback(hObject, eventdata, handles)
[filename, path] = uiputfile('*.mat');
out = handles.out;

out.pressure_angle = calcPressureAngle(handles);

[normalforce_tot, normalforce_acc, normalforce_load, normalforce_spring] = calcForces(handles);
out.normalforce_tot = normalforce_tot;
out.normalforce_acc = normalforce_acc;
out.normalforce_load = normalforce_load;
out.normalforce_spring = normalforce_spring;

[xpitch, ypitch, xcam, ycam] = calcCamContour(handles);
out.xpitch = xpitch;
out.ypitch = ypitch;
out.xcam = xcam;
out.ycam = ycam;

[roc_pitch, roc_cam] = calcRadiusOfCurvature(handles);
out.roc_pitch = roc_pitch;
out.roc_cam = roc_cam;

try
  save(fullfile(path, filename), '-struct', 'out');
catch
  errordlg('No valid save file was selected. Nothing saved.', 'Error')
end

function pushbuttonload_Callback(hObject, eventdata, handles)
[filename, path] = uigetfile('*.mat', 'Select a mat file');
try
  out = load(fullfile(path, filename));
  handles.out = out;
  set(handles.bcr, 'String' , num2str(out.bcr));
  set(handles.rof, 'String' , num2str(out.rof));
  set(handles.exc, 'String',  num2str(out.exc));
  set(handles.mass, 'String',  num2str(out.mass));
  set(handles.springconstant, 'String',  num2str(out.springconstant));
  set(handles.springpreload, 'String',  num2str(out.springpreload));
  set(handles.rpm, 'String',  num2str(out.rpm));
  guidata(hObject, handles);
catch
  errordlg('No file was selected. Nothing loaded.', 'Error')
end


%% output function
% --- Outputs from this function are returned to the command line.
function varargout = matcam_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.out;

%% create functions
% --- Executes during object creation, after setting all properties.
function startangle_CreateFcn(hObject, eventdata, handles) %#ok<*INUSD>
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function startlift_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function endangle_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function endlift_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function cycloidtype_CreateFcn(hObject, eventdata, handles)

if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function startangleload_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function startload_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function endangleload_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function endload_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function campos_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function exc_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function rof_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function bcr_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function rpm_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function springpreload_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function springconstant_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function mass_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Creates and returns a handle to the GUI figure. 
function h1 = matcam_LayoutFcn(policy)
% policy - create a new figure or use a singleton. 'new' or 'reuse'.

persistent hsingleton;
if strcmpi(policy, 'reuse') & ishandle(hsingleton)
    h1 = hsingleton;
    return;
end

clc
appdata = [];
appdata.GUIDEOptions = struct(...
    'active_h', [], ...
    'taginfo', struct(...
    'figure', 2, ...
    'text', 28, ...
    'uipanel', 6, ...
    'edit', 21, ...
    'popupmenu', 3, ...
    'pushbutton', 13, ...
    'uibuttongroup', 2, ...
    'togglebutton', 2, ...
    'radiobutton', 9), ...
    'override', 1, ...
    'release', [], ...
    'resize', 'none', ...
    'accessibility', 'off', ...
    'mfile', 1, ...
    'callbacks', 1, ...
    'singleton', 1, ...
    'syscolorfig', 1, ...
    'blocking', 0);
appdata.lastValidTag = 'Matcam';
appdata.GUIDELayoutEditor = [];
appdata.initTags = struct(...
    'handle', [], ...
    'tag', 'Matcam');

h1 = figure(...
'Units','characters',...
'Position',[135.8 38.6199095022624 178.428571428571 45.7647058823529],...
'Visible',get(0,'defaultfigureVisible'),...
'Color',[0.94 0.94 0.94],...
'IntegerHandle','off',...
'MenuBar','figure',...
'Name','Matcam cam design (PMA - KU Leuven)',...
'NumberTitle','off',...
'Tag','Matcam',...
'Resize',get(0,'defaultfigureResize'),...
'PaperPosition',get(0,'defaultfigurePaperPosition'),...
'HandleVisibility','off',...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'uipanelfigure';

h2 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units',get(0,'defaultuipanelUnits'),...
'Title',blanks(0),...
'Tag','uipanelfigure',...
'Position',[0.01 0.025 0.485 0.95],...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'uipanelmotionlaw';

h3 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units',get(0,'defaultuipanelUnits'),...
'Title',blanks(0),...
'BackgroundColor',[0.651 0.651 0.651],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','uipanelmotionlaw',...
'Position',[0.53 0.75 0.45 0.23],...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'startangletext';

h4 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','start angle (degrees):',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.01 0.39 0.245 0.18],...
'BackgroundColor', [0.94, 0.94, 0.94],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startangletext',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight')); %#ok<*NASGU>

appdata = [];
appdata.lastValidTag = 'startlifttext';

h5 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','start lift (mm):',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.5 0.39 0.245 0.18],...
'BackgroundColor',[0.94, 0.94, 0.94],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startlifttext',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'startangle';

h6 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','0',...
'Style','edit',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.255 0.385 0.245 0.195],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('startangle_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('startangle_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startangle',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'startlift';

h7 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','0',...
'Style','edit',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.745 0.385 0.245 0.195],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('startlift_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('startlift_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startlift',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'endangletext';

h8 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','end angle (degrees):',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.01 0.2 0.245 0.18],...
'BackgroundColor',[0.94, 0.94, 0.94],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endangletext',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'endlifttext';

h9 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','end lift (mm):',...
'Style','text',...
'Position',[0.5 0.2 0.245 0.18],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endlifttext',...
'FontSize',8, ...
'BackgroundColor',[0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'endangle';

h10 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.255 0.195 0.245 0.195],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('endangle_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('endangle_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endangle',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'endlift';

h11 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.745 0.195 0.245 0.195],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('endlift_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('endlift_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endlift',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'cycloidtype';

h12 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String',{  'cycloid type 1'; 'cycloid type 2'; 'cycloid type 3'; 'cycloid type 4'; 'cycloid type 5'; 'cycloid type 6' },...
'Style','popupmenu',...
'Value',1,...
'Position',[0.01 0.54 0.245 0.18],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('cycloidtype_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('cycloidtype_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','cycloidtype',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'viewsegment';

h13 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','View segment',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.258 0.01 0.241 0.18],...
'Callback',@(hObject,eventdata)matcam('viewsegment_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','viewsegment',...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'addsegment';

h14 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Add segment',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.5 0.01 0.245 0.18],...
'Callback',@(hObject,eventdata)matcam('addsegment_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','addsegment',...
'KeyPressFcn',blanks(0),...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'clearmotion';

h15 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Clear motion',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.749 0.01 0.241 0.18],...
'BackgroundColor',[0.749019607843137 0.549019607843137 0.549019607843137],...
'Callback',@(hObject,eventdata)matcam('clearmotion_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','clearmotion',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'titletextmotion';

h16 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','Generate motion law',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.010 0.72 0.98 0.27],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',[0.250980392156863 0.250980392156863 1],...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','titletextmotion',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',14,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'viewall';

h17 = uicontrol(...
'Parent',h3,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','View all',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.01 0.01 0.245 0.18],...
'Callback',@(hObject,eventdata)matcam('viewall_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','viewall',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'uipanelanalyse';

h18 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units',get(0,'defaultuipanelUnits'),...
'ForegroundColor',get(0,'defaultuipanelForegroundColor'),...
'HighlightColor',get(0,'defaultuipanelHighlightColor'),...
'ShadowColor',get(0,'defaultuipanelShadowColor'),...
'BorderType',get(0,'defaultuipanelBorderType'),...
'BorderWidth',get(0,'defaultuipanelBorderWidth'),...
'TitlePosition',get(0,'defaultuipanelTitlePosition'),...
'Title',blanks(0),...
'Visible',get(0,'defaultuipanelVisible'),...
'BackgroundColor',[0.651 0.651 0.651],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanelanalyse',...
'UserData',[],...
'Position',[0.53 0.0784 0.45 0.44],...
'HandleVisibility',get(0,'defaultuipanelHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuipanelFontName'),...
'FontAngle',get(0,'defaultuipanelFontAngle'),...
'FontWeight',get(0,'defaultuipanelFontWeight'));

appdata = [];
appdata.lastValidTag = 'uibuttongroup';

h19 = uibuttongroup(...
'Parent',h18,...
'FontUnits','points',...
'Units','normalized',...
'SelectionChangeFcn',blanks(0),...
'Title',blanks(0),...
'Tag','uibuttongroup',...
'Position',[0.01 0.01 0.98 0.32051282051282],...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata},...
'BackgroundColor',[0.94 0.94 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonlift';

h20 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' lift',...
'Style','radiobutton',...
'Value',1,...
'Position',[0.01 0.66 0.32 0.33],...
'Callback',blanks(0),...
'Children',[],...
'Tag','radiobuttonlift',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonvelocity';

h21 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' velocity',...
'Style','radiobutton',...
'Position',[0.33 0.66 0.32 0.33],...
'Callback',blanks(0),...
'Children',[],...
'Tag','radiobuttonvelocity',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonacceleration';

h22 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' acceleration',...
'Style','radiobutton',...
'Position',[0.66 0.66 0.32 0.33],...
'Children',[],...
'Tag','radiobuttonacceleration',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonpressureangle';

h23 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' pressure angle',...
'Style','radiobutton',...
'Position',[0.01 0.33 0.32 0.33],...
'Children',[],...
'Tag','radiobuttonpressureangle',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata},...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonroc';

h24 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' radius of curvature',...
'Style','radiobutton',...
'Position',[0.33 0.33 0.32 0.33],...
'Children',[],...
'Tag','radiobuttonroc',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata},...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttoncamcontour';

h25 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' cam contour',...
'Style','radiobutton',...
'Position',[0.66 0.33 0.32 0.33],...
'Children',[],...
'Tag','radiobuttoncamcontour',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonnormalforce';

h26 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' normal force',...
'Style','radiobutton',...
'Position',[0.01 0 0.32 0.33],...
'Children',[],...
'Tag','radiobuttonnormalforce',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'radiobuttonxyforce';

h27 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment','left',...
'String',' x-y force',...
'Style','radiobutton',...
'Position',[0.33 0 0.32 0.33],...
'Children',[],...
'Tag','radiobuttonxyforce',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'pushbuttonplotanalysis';

h28 = uicontrol(...
'Parent',h19,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Plot selected',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.66 0 0.32 0.33],...
'Callback',@(hObject,eventdata)matcam('pushbuttonplotanalysis_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','pushbuttonplotanalysis',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'titletextanalyse';

h29 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Analyze',...
'Style','text',...
'Position',[0.01 0.85 0.98 0.14],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ForegroundColor',[0.250980392156863 0.250980392156863 1],...
'Tag','titletextanalyse',...
'FontSize',14,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} );

appdata = [];
appdata.lastValidTag = 'textkinematics';

h30 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','kinematics input',...
'Style','text',...
'Position',[0.01 0.74 0.48 0.095],...
'Children',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','textkinematics',...
'FontSize',8, ...
'BackgroundColor',[0.94,0.94,0.94]);

appdata = [];
appdata.lastValidTag = 'bcrtext';

h31 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','base radius (mm): ',...
'Style','text',...
'Position',[0.01 0.64 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','bcrtext',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'roftext';

h32 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','follower radius (mm): ',...
'Style','text',...
'Position',[0.01 0.54 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','roftext',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'exctext';

h33 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','excentricity (mm): ',...
'Style','text',...
'Position',[0.01 0.44 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','exctext',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'campostext';

h34 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','cam position (degree): ',...
'Style','text',...
'Position',[0.01 0.34 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','campostext',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'text23';

h35 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','dynamics input',...
'Style','text',...
'Position',[0.5 0.74 0.49 0.095],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','text23',...
'FontSize',8, ...
'BackgroundColor',[0.94,0.94,0.94]);

appdata = [];
appdata.lastValidTag = 'text24';

h36 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','equivalent mass (kg):',...
'Style','text',...
'Position',[0.5 0.64 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','text24',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'text25';

h37 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','spring constant (N/mm):',...
'Style','text',...
'Position',[0.5 0.54 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','text25',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'text26';

h38 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','spring preload (N): ',...
'Style','text',...
'Position',[0.5 0.44 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','text26',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'text27';

h39 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'String','cam rpm:',...
'Style','text',...
'Position',[0.5 0.34 0.29 0.095],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','text27',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'bcr';

h40 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','NaN',...
'Style','edit',...
'Position',[0.3 0.635 0.19 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('bcr_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('bcr_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','bcr',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'rof';

h41 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','NaN',...
'Style','edit',...
'Position',[0.3 0.535 0.19 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('rof_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('rof_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','rof',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'exc';

h42 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.3 0.435 0.19 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('exc_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('exc_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','exc',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'campos';

h43 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.3 0.335 0.19 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('campos_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('campos_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'Tag','campos',...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'mass';

h44 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.791 0.635 0.2 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('mass_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('mass_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','mass',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'springconstant';

h45 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.791 0.535 0.2 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('springconstant_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('springconstant_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','springconstant',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'springpreload';

h46 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.791 0.435 0.2 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('springpreload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('springpreload_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','springpreload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'rpm';

h47 = uicontrol(...
'Parent',h18,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.791 0.335 0.2 0.105],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('rpm_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('rpm_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','rpm',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'uipanel5';

h48 = uipanel(...
'Parent',h1,...
'FontUnits',get(0,'defaultuipanelFontUnits'),...
'Units',get(0,'defaultuipanelUnits'),...
'Title',blanks(0),...
'BackgroundColor',[0.650980392156863 0.650980392156863 0.650980392156863],...
'ResizeFcn',blanks(0),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','uipanel5',...
'Position',[0.530 0.53 0.45 0.21],...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'startangleloadtext';

h49 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','start angle (degrees):',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.01 0.47 0.245 0.23],...
'BackgroundColor', [0.94, 0.94, 0.94],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startangleloadtext',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'startloadtext';

h50 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','start load (N):',...
'Style','text',...
'Position',[0.5 0.47 0.245 0.23],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startloadtext',...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'startangleload';

h51 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.255 0.465 0.245 0.245],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('startangleload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('startangleload_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startangleload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'startload';

h52 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.745 0.465 0.245 0.245],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('startload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('startload_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','startload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'endangleloadtext';

h53 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','end angle (degrees):',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.01 0.24 0.245 0.22],...
'BackgroundColor', [0.94, 0.94, 0.94],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',get(0,'defaultuicontrolForegroundColor'),...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endangleloadtext',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',8,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));

appdata = [];
appdata.lastValidTag = 'endloadtext';

h54 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','end load (N):',...
'Style','text',...
'Position',[0.5 0.24 0.245 0.22],...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endloadtext',...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'endangleload';

h55 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.255 0.235 0.245 0.245],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('endangleload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('endangleload_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endangleload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'endload';

h56 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','0',...
'Style','edit',...
'Position',[0.745 0.235 0.245 0.245],...
'BackgroundColor',[1 1 1],...
'Callback',@(hObject,eventdata)matcam('endload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, @(hObject,eventdata)matcam('endload_CreateFcn',hObject,eventdata,guidata(hObject)), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','endload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'viewsegementload';

h57 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','View segment',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.258 0.01 0.245 0.225],...
'Callback',@(hObject,eventdata)matcam('viewsegementload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','viewsegementload',...
'KeyPressFcn',blanks(0),...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'addsegmentload';

h58 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Add segment',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.5 0.01 0.245341614906832 0.225],...
'Callback',@(hObject,eventdata)matcam('addsegmentload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','addsegmentload',...
'KeyPressFcn',blanks(0),...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'clearload';

h59 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Clear load',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.749 0.01 0.241 0.225],...
'BackgroundColor',[0.749019607843137 0.549019607843137 0.549019607843137],...
'Callback',@(hObject,eventdata)matcam('clearload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','clearload',...
'KeyPressFcn',blanks(0),...
'FontSize',8);

appdata = [];
appdata.lastValidTag = 'titletextload';

h60 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'HorizontalAlignment',get(0,'defaultuicontrolHorizontalAlignment'),...
'ListboxTop',get(0,'defaultuicontrolListboxTop'),...
'Max',get(0,'defaultuicontrolMax'),...
'Min',get(0,'defaultuicontrolMin'),...
'SliderStep',get(0,'defaultuicontrolSliderStep'),...
'String','Generate external load (linear)',...
'Style','text',...
'Value',get(0,'defaultuicontrolValue'),...
'Position',[0.01 0.71 0.98 0.28],...
'BackgroundColor',[0.901960784313726 0.901960784313726 0.901960784313726],...
'Callback',blanks(0),...
'Children',[],...
'ForegroundColor',[0.250980392156863 0.250980392156863 1],...
'Enable',get(0,'defaultuicontrolEnable'),...
'TooltipString',blanks(0),...
'Visible',get(0,'defaultuicontrolVisible'),...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','titletextload',...
'UserData',[],...
'KeyPressFcn',blanks(0),...
'HandleVisibility',get(0,'defaultuicontrolHandleVisibility'),...
'FontSize',14,...
'FontName',get(0,'defaultuicontrolFontName'),...
'FontAngle',get(0,'defaultuicontrolFontAngle'),...
'FontWeight',get(0,'defaultuicontrolFontWeight'));
appdata = [];
appdata.lastValidTag = 'viewallload';

h61 = uicontrol(...
'Parent',h48,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','View all',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.01 0.01 0.2455 0.225],...
'Callback',@(hObject,eventdata)matcam('viewallload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'Tag','viewallload',...
'FontSize',8,...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata}, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'pushbuttonsave';

h62 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Save to file',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.618895116092874 0.0179948586118252 0.132105684547638 0.0437017994858612],...
'Callback',@(hObject,eventdata)matcam('pushbuttonsave_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'Tag','pushbuttonsave',...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);

appdata = [];
appdata.lastValidTag = 'pushbuttonload';

h63 = uicontrol(...
'Parent',h1,...
'FontUnits',get(0,'defaultuicontrolFontUnits'),...
'Units','normalized',...
'String','Load file',...
'Style',get(0,'defaultuicontrolStyle'),...
'Position',[0.77341873498799 0.019280205655527 0.132105684547638 0.0437017994858612],...
'Callback',@(hObject,eventdata)matcam('pushbuttonload_Callback',hObject,eventdata,guidata(hObject)),...
'Children',[],...
'ButtonDownFcn',blanks(0),...
'CreateFcn', {@local_CreateFcn, blanks(0), appdata} ,...
'DeleteFcn',blanks(0),...
'Tag','pushbuttonload',...
'KeyPressFcn',blanks(0),...
'FontSize',8, ...
'BackgroundColor', [0.94, 0.94, 0.94]);


hsingleton = h1;

function initialize_gui(fig_handle, handles, isreset)
% If the metricdata field is present and the reset flag is false, it means
% we are we are just re-initializing a GUI by calling it from the cmd line
% while it is up. So, bail out as we dont want to reset the data.
if isfield(handles, 'out') && ~isreset
    return;
end

dtheta = 0.01;
handles.out.thetadegree = 0:dtheta:360-dtheta; %cam angle in degrees
handles.out.theta = handles.out.thetadegree*pi/180; %cam angle in radians
handles.out.S = zeros(1, length(handles.out.theta)); %lift follower in mm
handles.out.V = zeros(1, length(handles.out.theta)); %velocity follower in mm/rad
handles.out.Vdegree = zeros(1, length(handles.out.theta)); %velocity follower in mm/degree
handles.out.A = zeros(1, length(handles.out.theta)); %acceleration follower in mm/rad^2
handles.out.Adegree = zeros(1, length(handles.out.theta)); %acceleration follower in mm/rad^2
handles.out.extload = zeros(1, length(handles.out.theta)); %external load in N

handles.out.bcr = NaN; %base circle radius in mm
handles.out.rof = NaN; %radius of follower in mm
handles.out.exc = 0; %excentricity in degrees
handles.out.mass = 0; %equivalent mass in kg
handles.out.springconstant = 0; %spring constant in N/mm
handles.out.springpreload = 0; %spring preload in N
handles.out.rpm = 0; %rotations per minute of the cam
handles.out.w = 0; %angular velocity of the cam in rad/s

set(handles.bcr, 'String', handles.out.bcr);
set(handles.rof, 'String', handles.out.rof);
set(handles.exc, 'String', handles.out.exc);
set(handles.mass, 'String', handles.out.mass);
set(handles.springconstant, 'String', handles.out.springconstant);
set(handles.springpreload, 'String', handles.out.springpreload);
set(handles.rpm, 'String', handles.out.rpm);

handles.temp.startangle = 0;
handles.temp.endangle = 0;
handles.temp.startlift = 0;
handles.temp.endlift = 0;
handles.temp.startangleload = 0;
handles.temp.endangleload = 0;
handles.temp.startload = 0;
handles.temp.endload = 0;
handles.temp.cycloidtype = 1;
handles.temp.campos = 0; %position of the cam for plot
handles.temp.exc = 0;


% Update handles structure
guidata(handles.Matcam, handles);

% --- Set application data first then calling the CreateFcn. 
function local_CreateFcn(hObject, eventdata, createfcn, appdata)

if ~isempty(appdata)
   names = fieldnames(appdata);
   for i=1:length(names)
       name = char(names(i));
       setappdata(hObject, name, getfield(appdata,name));
   end
end

if ~isempty(createfcn)
   if isa(createfcn,'function_handle')
       createfcn(hObject, eventdata);
   else
       eval(createfcn);
   end
end


% --- Handles default GUIDE GUI creation and callback dispatch
function varargout = gui_mainfcn(gui_State, varargin)

gui_StateFields =  {'gui_Name'
    'gui_Singleton'
    'gui_OpeningFcn'
    'gui_OutputFcn'
    'gui_LayoutFcn'
    'gui_Callback'};
gui_Mfile = '';
for i=1:length(gui_StateFields)
    if ~isfield(gui_State, gui_StateFields{i})
        error(message('MATLAB:guide:StateFieldNotFound', gui_StateFields{ i }, gui_Mfile));
    elseif isequal(gui_StateFields{i}, 'gui_Name')
        gui_Mfile = [gui_State.(gui_StateFields{i}), '.m'];
    end
end

numargin = length(varargin);

if numargin == 0
    % matcam
    % create the GUI only if we are not in the process of loading it
    % already
    gui_Create = true;
elseif local_isInvokeActiveXCallback(gui_State, varargin{:})
    % matcam(ACTIVEX,...)
    vin{1} = gui_State.gui_Name;
    vin{2} = [get(varargin{1}.Peer, 'Tag'), '_', varargin{end}];
    vin{3} = varargin{1};
    vin{4} = varargin{end-1};
    vin{5} = guidata(varargin{1}.Peer);
    feval(vin{:});
    return;
elseif local_isInvokeHGCallback(gui_State, varargin{:})
    % matcam('CALLBACK',hObject,eventData,handles,...)
    gui_Create = false;
else
    % matcam(...)
    % create the GUI and hand varargin to the openingfcn
    gui_Create = true;
end

if ~gui_Create
    % In design time, we need to mark all components possibly created in
    % the coming callback evaluation as non-serializable. This way, they
    % will not be brought into GUIDE and not be saved in the figure file
    % when running/saving the GUI from GUIDE.
    designEval = false;
    if (numargin>1 && ishghandle(varargin{2}))
        fig = varargin{2};
        while ~isempty(fig) && ~ishghandle(fig,'figure')
            fig = get(fig,'parent');
        end
        
        designEval = isappdata(0,'CreatingGUIDEFigure') || (isscalar(fig)&&isprop(fig,'GUIDEFigure'));
    end
        
    if designEval
        beforeChildren = findall(fig);
    end
    
    % evaluate the callback now
    varargin{1} = gui_State.gui_Callback;
    if nargout
        [varargout{1:nargout}] = feval(varargin{:});
    else       
        feval(varargin{:});
    end
    
    % Set serializable of objects created in the above callback to off in
    % design time. Need to check whether figure handle is still valid in
    % case the figure is deleted during the callback dispatching.
    if designEval && ishghandle(fig)
        set(setdiff(findall(fig),beforeChildren), 'Serializable','off');
    end
else
    if gui_State.gui_Singleton
        gui_SingletonOpt = 'reuse';
    else
        gui_SingletonOpt = 'new';
    end

    % Check user passing 'visible' P/V pair first so that its value can be
    % used by oepnfig to prevent flickering
    gui_Visible = 'auto';
    gui_VisibleInput = '';
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        % Recognize 'visible' P/V pair
        len1 = min(length('visible'),length(varargin{index}));
        len2 = min(length('off'),length(varargin{index+1}));
        if ischar(varargin{index+1}) && strncmpi(varargin{index},'visible',len1) && len2 > 1
            if strncmpi(varargin{index+1},'off',len2)
                gui_Visible = 'invisible';
                gui_VisibleInput = 'off';
            elseif strncmpi(varargin{index+1},'on',len2)
                gui_Visible = 'visible';
                gui_VisibleInput = 'on';
            end
        end
    end
    
    % Open fig file with stored settings.  Note: This executes all component
    % specific CreateFunctions with an empty HANDLES structure.

    
    % Do feval on layout code in m-file if it exists
    gui_Exported = ~isempty(gui_State.gui_LayoutFcn);
    % this application data is used to indicate the running mode of a GUIDE
    % GUI to distinguish it from the design mode of the GUI in GUIDE. it is
    % only used by actxproxy at this time.   
    setappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]),1);
    if gui_Exported
        gui_hFigure = feval(gui_State.gui_LayoutFcn, gui_SingletonOpt);

        % make figure invisible here so that the visibility of figure is
        % consistent in OpeningFcn in the exported GUI case
        if isempty(gui_VisibleInput)
            gui_VisibleInput = get(gui_hFigure,'Visible');
        end
        set(gui_hFigure,'Visible','off')

        % openfig (called by local_openfig below) does this for guis without
        % the LayoutFcn. Be sure to do it here so guis show up on screen.
        movegui(gui_hFigure,'onscreen');
    else
        gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        % If the figure has InGUIInitialization it was not completely created
        % on the last pass.  Delete this handle and try again.
        if isappdata(gui_hFigure, 'InGUIInitialization')
            delete(gui_hFigure);
            gui_hFigure = local_openfig(gui_State.gui_Name, gui_SingletonOpt, gui_Visible);
        end
    end
    if isappdata(0, genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]))
        rmappdata(0,genvarname(['OpenGuiWhenRunning_', gui_State.gui_Name]));
    end

    % Set flag to indicate starting GUI initialization
    setappdata(gui_hFigure,'InGUIInitialization',1);

    % Fetch GUIDE Application options
    gui_Options = getappdata(gui_hFigure,'GUIDEOptions');
    % Singleton setting in the GUI MATLAB code file takes priority if different
    gui_Options.singleton = gui_State.gui_Singleton;

    if ~isappdata(gui_hFigure,'GUIOnScreen')
        % Adjust background color
        if gui_Options.syscolorfig
            set(gui_hFigure,'Color', get(0,'DefaultUicontrolBackgroundColor'));
        end

        % Generate HANDLES structure and store with GUIDATA. If there is
        % user set GUI data already, keep that also.
        data = guidata(gui_hFigure);
        handles = guihandles(gui_hFigure);
        if ~isempty(handles)
            if isempty(data)
                data = handles;
            else
                names = fieldnames(handles);
                for k=1:length(names)
                    data.(char(names(k)))=handles.(char(names(k)));
                end
            end
        end
        guidata(gui_hFigure, data);
    end

    % Apply input P/V pairs other than 'visible'
    for index=1:2:length(varargin)
        if length(varargin) == index || ~ischar(varargin{index})
            break;
        end

        len1 = min(length('visible'),length(varargin{index}));
        if ~strncmpi(varargin{index},'visible',len1)
            try set(gui_hFigure, varargin{index}, varargin{index+1}), catch break, end
        end
    end

    % If handle visibility is set to 'callback', turn it on until finished
    % with OpeningFcn
    gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
    if strcmp(gui_HandleVisibility, 'callback')
        set(gui_hFigure,'HandleVisibility', 'on');
    end

    feval(gui_State.gui_OpeningFcn, gui_hFigure, [], guidata(gui_hFigure), varargin{:});

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        % Handle the default callbacks of predefined toolbar tools in this
        % GUI, if any
        guidemfile('restoreToolbarToolPredefinedCallback',gui_hFigure); 
        
        % Update handle visibility
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);

        % Call openfig again to pick up the saved visibility or apply the
        % one passed in from the P/V pairs
        if ~gui_Exported
            gui_hFigure = local_openfig(gui_State.gui_Name, 'reuse',gui_Visible);
        elseif ~isempty(gui_VisibleInput)
            set(gui_hFigure,'Visible',gui_VisibleInput);
        end
        if strcmpi(get(gui_hFigure, 'Visible'), 'on')
            figure(gui_hFigure);
            
            if gui_Options.singleton
                setappdata(gui_hFigure,'GUIOnScreen', 1);
            end
        end

        % Done with GUI initialization
        if isappdata(gui_hFigure,'InGUIInitialization')
            rmappdata(gui_hFigure,'InGUIInitialization');
        end

        % If handle visibility is set to 'callback', turn it on until
        % finished with OutputFcn
        gui_HandleVisibility = get(gui_hFigure,'HandleVisibility');
        if strcmp(gui_HandleVisibility, 'callback')
            set(gui_hFigure,'HandleVisibility', 'on');
        end
        gui_Handles = guidata(gui_hFigure);
    else
        gui_Handles = [];
    end

    if nargout
        [varargout{1:nargout}] = feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    else
        feval(gui_State.gui_OutputFcn, gui_hFigure, [], gui_Handles);
    end

    if isscalar(gui_hFigure) && ishghandle(gui_hFigure)
        set(gui_hFigure,'HandleVisibility', gui_HandleVisibility);
    end
end

function gui_hFigure = local_openfig(name, singleton, visible)

% openfig with three arguments was new from R13. Try to call that first, if
% failed, try the old openfig.
if nargin('openfig') == 2
    % OPENFIG did not accept 3rd input argument until R13,
    % toggle default figure visible to prevent the figure
    % from showing up too soon.
    gui_OldDefaultVisible = get(0,'defaultFigureVisible');
    set(0,'defaultFigureVisible','off');
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton);
    set(0,'defaultFigureVisible',gui_OldDefaultVisible);
else
    % Call version of openfig that accepts 'auto' option"
    gui_hFigure = matlab.hg.internal.openfigLegacy(name, singleton, visible);  
%     %workaround for CreateFcn not called to create ActiveX
%         peers=findobj(findall(allchild(gui_hFigure)),'type','uicontrol','style','text');    
%         for i=1:length(peers)
%             if isappdata(peers(i),'Control')
%                 actxproxy(peers(i));
%             end            
%         end
end

function result = local_isInvokeActiveXCallback(gui_State, varargin)

try
    result = ispc && iscom(varargin{1}) ...
             && isequal(varargin{1},gcbo);
catch
    result = false;
end

function result = local_isInvokeHGCallback(gui_State, varargin)

try
    fhandle = functions(gui_State.gui_Callback);
    result = ~isempty(findstr(gui_State.gui_Name,fhandle.file)) || ...
             (ischar(varargin{1}) ...
             && isequal(ishghandle(varargin{2}), 1) ...
             && (~isempty(strfind(varargin{1},[get(varargin{2}, 'Tag'), '_'])) || ...
                ~isempty(strfind(varargin{1}, '_CreateFcn'))) );
catch
    result = false;
end


